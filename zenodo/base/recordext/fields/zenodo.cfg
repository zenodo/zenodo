## This file is part of Zenodo.
## Copyright (C) 2012, 2013 CERN.
##
## Zenodo is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## Zenodo is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with Zenodo. If not, see <http://www.gnu.org/licenses/>.
##
## In applying this licence, CERN does not waive the privileges and immunities
## granted to it by virtue of its status as an Intergovernmental Organization
## or submit itself to any jurisdiction.


@extend
recid:
    producer:
        json_for_form(), {'recid': ''}


@persistent_identifier(1)
system_number:
    creator:
        marc, "970__", {'system_number': int(value['a']), 'recid': int(value['d'])}
    producer:
        json_for_marc(), {"970__a": "system_number", "970__d": "recid"}


@persistent_identifier(2)
system_control_number:
    creator:
        @only_if_master_value(value['9']!='Altmetric', value['9']!='Deposition')
        marc, "035__", {'system_control_number': value['a'], 'canceled':value['z'], 'linkpage':value['6'], 'institute':value['9']}
    producer:
        json_for_marc(), {"035__a": "system_control_number", "035__9": "institute"}


@persistent_identifier(3)
doi:
    creator:
        @only_if_master_value((value['2'] or '').upper() == 'DOI')
        marc, "0247_", value['a']
    producer:
        json_for_marc(), {'0247_2': 'str("DOI")', '0247_a': ''}
        json_for_form(), {"doi": ""}
        json_for_ld(), {'@id': '"http://dx.doi.org/" + value'}
        json_for_ld(), {'@context': 'str("http://schema.org")'}



@persistent_identifier(4)
oai:
    creator:
        marc, "909CO", {'oai': value['o'], 'indicator': value['p']}
    producer:
        json_for_marc(), {"909COo": "oai", "909COp": "indicator"}

#
# General
#
upload_type:
    creator:
        @only_if_master_value(value['a'] in ['publication', 'poster', 'presentation', 'dataset', 'video', 'image', 'software'])
        marc, "980__", { 'type':value['a'], 'subtype':value['b'], }
    producer:
        json_for_marc(), {"980__a": "type", "980__b": "subtype"}
        json_for_form(), {"upload_type": "type"}
        json_for_form(), {"publication_type": "value['subtype'] if value['type'] == 'publication' else ''"}
        json_for_form(), {"image_type": "value['subtype'] if value['type'] == 'image' else ''"}


collections:
    schema:
        {'collections': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value(not ((value['a'] or '').startswith('provisional-user-') or (value['a'] or '').startswith('user-') or value['a'] in ['publication', 'poster', 'presentation', 'dataset', 'video', 'image', 'software']))
        marc, "980__", { 'primary':value['a'], 'secondary':value['b'], 'deleted':value['c'] }
    producer:
        json_for_marc(), {"980__a": "primary", "980__b": "secondary", "980__c": "deleted"}


#
# Basic information
#
publication_date:
    creator:
        @only_if_master_value(not value['a'] and not value['b'])
        marc, "260__", datetime.date(*(time.strptime(value['c'] or '', '%Y-%m-%d')[0:3]))
    producer:
        json_for_marc(), {"260__c": "value.isoformat()"}
        json_for_form(), {"publication_date": ""}
    json:
        loads, lambda d: __import__('datetime').datetime.strptime(d, "%Y-%m-%d").date()
        dumps, lambda d: d.isoformat()


title:
    creator:
        marc, "245__", value['a']
    producer:
        json_for_marc(), {"245__a": ""}
        json_for_form(), {"title": ""}

_first_author, first_author, creator:
    creator:
        @only_if_master_value(value['4'] is None or value['4'] == '')
        marc, "100__", { 'name':value['a'], 'affiliation':value['u'], 'orcid': value['0'][7:] if (value['0'] or '').startswith('(orcid)') else '', 'familyname': value['a'].split(',')[0].strip(), 'givennames': ' '.join(value['a'].split(',')[1:]).strip()}
    producer:
        json_for_marc(), {"100__a": "name", "100__u": "affiliation", "100__0": "'(orcid)'+value['orcid'] if value.get('orcid') else None"}

_additional_authors, additional_authors, contributor:
    schema:
        {'_additional_authors': {'type': 'list', 'force': True}}
    creator:
        @parse_first('_first_author')
        @only_if_master_value(value['4'] is None or value['4'] == '')
        marc, "700__", {'name': value['a'], 'affiliation':value['u'], 'orcid': value['0'][7:] if (value['0'] or '').startswith('(orcid)') else '' }
    producer:
        json_for_marc(), {"700__a": "name", "700__u": "affiliation", "700__0": "'(orcid)'+value['orcid'] if value.get('orcid') else None"}

authors:
    """List with all the authors, connected with main_author and rest_authors"""
    derived:
        @parse_first('_first_author', '_additional_authors')
        @connect('_first_author', sync_authors)
        @connect('_additional_authors', sync_authors)
        @only_if('_first_author' in self or '_additional_authors' in self)
        util_merge_fields_info_list(self, ['_first_author', '_additional_authors'])
    producer:
        json_for_form(), {"creators": "[{'name': value.get('name',''), 'affiliation': value.get('affiliation',''), 'orcid': value.get('orcid', '')}]"}
        json_for_ld(), {"author": "[{'@type': 'Person', 'name': value.get('name',''), '@id': 'http://orcid.org/' + value.get('orcid','') if value.get('orcid') else None, }]"}

description:
    creator:
        marc, "520__", value['a']
    producer:
        json_for_marc(), {"520__a": "",}
        json_for_form(), {"description": ""}


keywords:
    schema:
        {'keywords': {'type': 'list', 'force': True}}
    creator:
        marc, "6531_", value['a']
    producer:
        json_for_marc(), {"6531_a": "",}
        json_for_form(), {"keywords": "[value]"}
        json_for_ld(), {"keywords": "[value]"}

notes:
    creator:
        marc, "500__", value['a']
    producer:
        json_for_marc(), {"500__a": "",}
        json_for_form(), {"notes": ""}


language:
    creator:
        marc, "041__", value['a']
    producer:
        json_for_marc(), {"041__a": ""}


#
# License details
#

access_right:
    creator:
        marc, "542__", value['l']
    producer:
        json_for_marc(), {"542__l": ""}
        json_for_form(), {"access_right": ""}


embargo_date:
    creator:
        marc, "942__", datetime.date(*(time.strptime(value['a'] or '', '%Y-%m-%d')[0:3]))
    producer:
        json_for_marc(), {"942__a": "self.get('embargo_date').isoformat()"}
        json_for_form(), {"embargo_date": ""}
    json:
        dumps, lambda d: d.isoformat()
        loads, lambda d: __import__('datetime').datetime.strptime(d, "%Y-%m-%d").date()


__license_text__:
    creator:
        marc, "540__", {'license':value['a'], 'url':value['u']}


__license_identifier__:
    creator:
        marc, "65017", {'source':value['2'], 'identifier':value['a']}


license:
    derived:
        @depends_on('__license_text__', '__license_identifier__')
        dict(self.get('__license_text__').items() + self.get('__license_identifier__').items())
    producer:
        json_for_marc(), {"540__a": "license", "540__u": "url"}
        json_for_marc(), {"650172": "source", "65017a": "identifier"}
        json_for_form(), {"license": "identifier"}
        json_for_ld(), {"license": "url"}

#
# Communities
#
communities:
    schema:
        {'communities': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value((value['a'] or '').startswith('user-'))
        marc, "980__", value['a'][len('user-'):]
    producer:
        json_for_marc(), {"980__a": "'user-'+value"}
        json_for_form(), {"communities": "[{'identifier': value, 'provisional': False}]"}

provisional_communities:
    schema:
        {'provisional_communities': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value((value['a'] or '').startswith('provisional-user-'))
        marc, "980__", value['a'][len('provisional-user-'):]
    producer:
        json_for_marc(), {"980__a": "'provisional-user-'+value"}
        json_for_form(), {"communities": "[{'identifier': value, 'provisional': True}]"}

#
# Funding information
#
grants:
    schema:
        {'grants': {'type': 'list', 'force': True}}
    creator:
        marc, "536__", {'title':value['a'], 'identifier':value['c'], }
    producer:
        json_for_marc(), {"536__a": "title", "536__c": "identifier"}
        json_for_form(), {"grants": "[{'id': value['identifier']}]"}

#
# Related work
#
related_identifiers:
    schema:
        {'related_identifiers': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value((value['n'] or '').lower() in ['doi', 'ark', 'handle', 'purl', 'lsid', 'urn', 'url', 'ads', 'pmcid', 'isbn', 'issn', 'orcid', 'isni', 'ean13', 'ean8', 'istc', 'pmid', 'arxiv',])
        marc, "773__", {'identifier':value['a'], 'scheme':(value['n'] or '').lower(), 'relation':value['i'] or 'isReferencedBy',}
    producer:
        json_for_marc(), {"773__a": "identifier", "773__n": "scheme", "773__i": "relation"}
        json_for_form(), {"related_identifiers": "[{'relation': value['relation'], 'scheme': value['scheme'], 'identifier': value['identifier']}]"}


alternate_identifiers:
    schema:
        {'alternate_identifiers': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value((value['2'] or '').upper() != 'DOI')
        marc, "0247_", {'identifier':value['a'], 'scheme': value['2']}
    producer:
        json_for_marc(), {"0247_a": "identifier", "0247_2": "scheme"}
        json_for_form(), {"related_identifiers": "[{'relation': str('isAlternativeIdentifier'), 'scheme': value['scheme'], 'identifier': value['identifier']}]"}

#
# Journal
#
journal:
    creator:
        marc, "909C4", {'title':value['p'], 'pages':value['c'], 'volume':value['v'], 'year':value['y'], 'issue': value['n']}
    producer:
        json_for_marc(), {"909C4p": "title", "909C4c": "pages", "909C4v": "volume", "909C4y": "year", "909C4n": "issue"}
        json_for_form(), {"journal_title": "title", "journal_volume": "volume", "journal_issue": "issue", "journal_pages": "pages",}

#
# Meeting
#
meetings:
    schema:
        {'related_identifiers': {'type': 'list', 'force': True}}
    creator:
        marc, "711__", {'title':value['a'], 'place':value['c'], 'dates':value['d'], 'acronym':value['g'], 'session': value['n'], 'session_part': value['p']}
    producer:
        json_for_marc(), {"711__a": "title", "711__c": "place", "711__d": "dates", "711__g": "acronym", "711__n": "session", "711__p": "session_part", }
        json_for_form(), {"conference_title": "title", "conference_place": "place", "conference_dates": "dates", "conference_acronym": "acronym", "conference_session": "session", "conference_session_part": "session_part"}


conference_url:
    creator:
        @only_if_master_value(((value['y'] or '') == 'Conference website',))
        marc, "8564_", value['u']
    producer:
        json_for_marc(), {"8564_y": "str('Conference website')", "8564_u": ""}
        json_for_form(), {"conference_url": ""}

#
# Book/report/chapter
#
imprint:
    creator:
        @only_if_master_value(value['a'] and value['b'])
        marc, "260__", {'place':value['a'], 'publisher':value['b'], 'year':value['c']}
    producer:
        json_for_marc(), { "260__a": "place", "260__b": "publisher", "260__c": "year" }
        json_for_form(), {"imprint_publisher": "publisher", "imprint_place": "place"}

isbn:
    creator:
        marc, "020__", value['a']
    producer:
        json_for_marc(), {"020__a": ""}
        json_for_form(), {"imprint_isbn": ""}


part_of:
    creator:
        @only_if_master_value(value['n'] is None or value['n'] == '')
        marc, "773__", {'place':value['a'], 'publisher':value['b'],
        'year':value['c'], 'pages':value['g'], 'isbn':value['z'],
        'title':value['t']}
    producer:
        json_for_marc(), {"773__t": "title", "773__a": "place", "773__b": "publisher", "773__g": "pages", "773__c": "year", "773__z": "isbn"}
        json_for_form(), {"imprint_publisher": "publisher", "imprint_place": "place", "imprint_isbn": "isbn", "partof_title": "title", "partof_pages": "pages"}

#
# Thesis
#
thesis_university:
    creator:
        marc, "502__", value['c']
    producer:
        json_for_marc(), {"502__c": ""}
        json_for_form(), {"thesis_university": ""}


thesis_supervisors:
    schema:
        {'thesis_supervisors': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value(value['4']=='ths')
        marc, "700__", {'name': value['a'], 'affiliation':value['u'], 'orcid': value['0'][7:] if (value['0'] or '').startswith('(orcid)') else '' }
    producer:
        json_for_marc(), {"700__a": "name", "700__u": "affiliation", "700__4": "str('ths')", "700__0": "'(orcid)'+value['orcid'] if value.get('orcid') else None"}
        json_for_form(), {"thesis_supervisors": "[{'name': value['name'], 'affiliation': value['affiliation'], 'orcid': value.get('orcid', '')}]"}


#
# System extracted metadata
#

references:
    schema:
        {'references': {'type': 'list', 'force': True}}
    creator:
        marc, "999C5", {'doi':value['a'], 'authors':value['h'], 'misc':value['m'], 'issue_number':value['n'], 'order_number':value['o'], 'page':value['p'], 'report_number':value['r'], 'title':value['s'], 'url':value['u'], 'volume':value['v'], 'year':value['y'], 'raw_reference':value['x']}
    producer:
        json_for_marc(), {"999C5a": "doi", "999C5h": "authors", "999C5m": "misc", "999C5n": "issue_number", "999C5o":"order_number", "999C5p":"page", "999C5r":"report_number", "999C5s":"title", "999C5u":"url", "999C5v":"volume", "999C5y": "year", "999C5x":"raw_reference"}
        json_for_form(), {"references": "[value['raw_reference']]"}


altmetric_id:
    creator:
        @only_if_master_value((value['9']=='Altmetric',))
        marc, "035__", value['a']
    producer:
        json_for_marc(), {'035__9': 'str("Altmetric")', '035__a': ''}



#
# Files
#

fft:
    creator:
        marc, "FFT__", {'path': value['a'],
                        'description': value['d'],
                        'format': value['f'],
                        'temporary_id': value['i'],
                        'new_name': value['m'],
                        'name': value['n'],
                        'flag': value['o'],
                        'restriction': value['r'],
                        'timestamp': value['s'],
                        'docfile_type': value['t'],
                        'version': value['v'],
                        'icon_path': value['x'],
                        'comment': value['z'],
                        'document_moreinfo': value['w'],
                        'version_moreinfo': value['p'],
                        'version_format_moreinfo': value['b'],
                        'format_moreinfo': value['u']
                       }
        @only_if_master_value(is_local_url(value['u']))
        marc, "8564_", {'host_name': value['a'],
                        'access_number': value['b'],
                        'compression_information': value['c'],
                        'path':value['d'],
                        'electronic_name': value['f'],
                        'request_processor': value['h'],
                        'institution': value['i'],
                        'formart': value['q'],
                        'settings': value['r'],
                        'file_size': value['s'],
                        'url': value['u'],
                        'subformat':value['x'],
                        'description':value['y'],
                        'comment':value['z']}
    producer:
        json_for_marc(), { "FFT__a": "path",
              "FFT__d": "description",
              "FFT__f": "format",
              "FFT__i": "temporary_id",
              "FFT__m": "new_name",
              "FFT__n": "name",
              "FFT__o": "flag",
              "FFT__r": "restriction",
              "FFT__s": "timestamp",
              "FFT__t": "docfile_type",
              "FFT__v": "version",
              "FFT__x": "icon_path",
              "FFT__z": "comment",
              "FFT__w": "document_moreinfo",
              "FFT__p": "version_moreinfo",
              "FFT__b": "version_format_moreinfo",
              "FFT__f": "format_moreinfo", }


url:
    creator:
        @only_if_master_value(not is_local_url(value['u']), (value['y'] or '') != 'Conference website')
        marc, "8564_", {'host_name': value['a'],
                        'access_number': value['b'],
                        'compression_information': value['c'],
                        'path':value['d'],
                        'electronic_name': value['f'],
                        'request_processor': value['h'],
                        'institution': value['i'],
                        'eformat': value['q'],
                        'settings': value['r'],
                        'size': value['s'],
                        'url': value['u'],
                        'subformat':value['x'],
                        'description':value['y'],
                        'comment':value['z']}
    producer:
        json_for_marc(), {"8564_a": "host_name", "8564_b": "access_number", "8564_c": "compression_information", "8564_d": "path", "8564_f": "electronic_name", "8564_h": "request_processor", "8564_i": "institution", "8564_q": "eformat", "8564_r": "settings", "8564_s": "file_size", "8564_u": "url", "8564_x": "subformat", "8564_y": "description", "8564_z": "comment"}


#
# Provenance
#

owner:
    creator:
        marc, "8560_", {'email': value['f'], 'username': value['y'],
            'id': value['w'], 'deposition_id': value['b']}
    producer:
        json_for_marc(), {"8560_f": "email", "8560_y": "username", "8560_w": "id", "8560_b": "deposition_id"}


source_of_acquisition:
    creator:
        marc, "541__", {'source': value['a'], 'method':value['c'], 'date':value['d'], 'accession_number':value['e'], 'owner': value['f']}
    producer:
        json_for_marc(), {"541__a": "source", "541__c": "method", "541__d": "date", "541__e": "accession_number", "541__f": "owner"}




@extend
modification_date:
    producer:
        json_for_form(), {"modification_date": ""}


_files:
    calculated:
        @parse_first('recid')
        get_files_from_bibdoc(self.get('recid', -1))
    description:
        """
        Retrieves all the files related with the recid that were passed to the system
        using the FFT field described above

        Note: this is a mandatory field and it shouldn't be remove from this configuration
        file. On the other hand the function that retrieve the metadata from BibDoc could
        be enrich.
        """
    producer:
        json_for_marc(), {"8564_z": "comment", "8564_y": "description", "8564_q": "format", "8564_f": "name", "8564_s": "size", "8564_u": "url"}

_bibdocs:
    calculated:
        get_bibdoc(self.get('recid', -1))
